'''
# Name: thesis_main_gui.py
# Task: Defining the main() for the entire GUI Interface with all functions
# Date: (Revised) 20.Feb 2021
# Src:  https://doc.qt.io/qtforpython/api.html#basic-modules
#       https://www.techwithtim.net/tutorials/pyqt5-tutorial/basic-gui-application/
#       https://www.geeksforgeeks.org/pyqt5-change-color-of-push-button/
#       https://www.pythonforthelab.com/blog/step-by-step-guide-to-building-a-gui/#acquiring-an-image-from-the-gui
#       https://www.tutorialspoint.com/pyqt/index.htm
#       https://www.youtube.com/watch?v=G7ffF0U36b0&t=748s
#       https://www.youtube.com/watch?v=dTDgbx-XelY
#       ...
'''

# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'thesis_gui.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMessageBox
from PyQt5.QtCore import *
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
from flc_component import FuzzyController

flc_obj = FuzzyController()

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1139, 760)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.title_label = QtWidgets.QLabel(self.centralwidget)
        self.title_label.setGeometry(QtCore.QRect(200, 20, 751, 91))
        font = QtGui.QFont()
        font.setPointSize(25)
        self.title_label.setFont(font)
        self.title_label.setObjectName("title_label")
        self.credit_label = QtWidgets.QLabel(self.centralwidget)
        self.credit_label.setGeometry(QtCore.QRect(20, 665, 921, 41))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        font.setStrikeOut(False)
        self.credit_label.setFont(font)
        self.credit_label.setScaledContents(True)
        self.credit_label.setObjectName("credit_label")
        self.start_button = QtWidgets.QPushButton(self.centralwidget)
        self.start_button.setGeometry(QtCore.QRect(20, 200, 141, 41))
        self.start_button.setStyleSheet("background-color:green")
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 127, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 170, 170))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0, 128))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.PlaceholderText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 127, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 170, 170))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0, 128))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.PlaceholderText, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 127, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 127, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 170, 170))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 127, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 127, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0, 128))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.PlaceholderText, brush)
        self.start_button.setPalette(palette)
        self.start_button.setObjectName("start_button")
        self.stop_button = QtWidgets.QPushButton(self.centralwidget)
        self.stop_button.setGeometry(QtCore.QRect(20, 360, 141, 41))
        self.stop_button.setObjectName("stop_button")
        self.stop_button.setStyleSheet("background-color:red")
        self.show_c1_button = QtWidgets.QPushButton(self.centralwidget)
        self.show_c1_button.setGeometry(QtCore.QRect(630, 200, 131, 41))
        self.show_c1_button.setObjectName("show_c1_button")
        self.show_c2_button = QtWidgets.QPushButton(self.centralwidget)
        self.show_c2_button.setGeometry(QtCore.QRect(630, 430, 131, 41))
        self.show_c2_button.setObjectName("show_c2_button")
        self.stop_c1_button = QtWidgets.QPushButton(self.centralwidget)
        self.stop_c1_button.setGeometry(QtCore.QRect(960, 200, 131, 41))
        self.stop_c1_button.setObjectName("stop_c1_button")
        self.stop_c2_button = QtWidgets.QPushButton(self.centralwidget)
        self.stop_c2_button.setGeometry(QtCore.QRect(960, 430, 131, 41))
        self.stop_c2_button.setObjectName("stop_c2_button")
        self.show_both_button = QtWidgets.QPushButton(self.centralwidget)
        self.show_both_button.setGeometry(QtCore.QRect(720, 310, 301, 51))
        self.show_both_button.setObjectName("show_both_button")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1139, 26))
        self.menubar.setObjectName("menubar")
        self.menuInfo = QtWidgets.QMenu(self.menubar)
        self.menuInfo.setObjectName("menuInfo")
        self.menuAbout = QtWidgets.QMenu(self.menubar)
        self.menuAbout.setObjectName("menuAbout")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionAbout_the_Thesis = QtWidgets.QAction(MainWindow)
        self.actionAbout_the_Thesis.setObjectName("actionAbout_the_Thesis")
        self.actionGo_to_code_GitHub_Repo = QtWidgets.QAction(MainWindow)
        self.actionGo_to_code_GitHub_Repo.setObjectName("actionGo_to_code_GitHub_Repo")
        self.actionSystem_Info = QtWidgets.QAction(MainWindow)
        self.actionSystem_Info.setObjectName("actionSystem_Info")
        self.menuInfo.addAction(self.actionSystem_Info)
        self.menuAbout.addAction(self.actionAbout_the_Thesis)
        self.menuAbout.addAction(self.actionGo_to_code_GitHub_Repo)
        self.menubar.addAction(self.menuInfo.menuAction())
        self.menubar.addAction(self.menuAbout.menuAction())

        self.status_label = QtWidgets.QLabel(self.centralwidget)
        self.status_label.setGeometry(QtCore.QRect(20, 280, 141, 41))
        self.status_label.setFont(font)
        self.status_label.setObjectName("status_label")

        self.display_status_label = QtWidgets.QLabel(self.centralwidget)
        self.display_status_label.setGeometry(QtCore.QRect(150, 280, 141, 41))
        self.display_status_label.setFont(font)
        self.display_status_label.setObjectName("display_status_label")

        self.exit_app = QtWidgets.QPushButton(self.centralwidget)
        self.exit_app.setGeometry(QtCore.QRect(180, 360, 141, 41))
        self.exit_app.setObjectName("exit_app")

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        # menu-option function mapping
        self.actionGo_to_code_GitHub_Repo.triggered.connect(lambda : self.show_about_gotocode())
        self.actionSystem_Info.triggered.connect(lambda : self.show_sys_info())
        self.actionAbout_the_Thesis.triggered.connect(lambda : self.show_about_thesis())

        # threads with buttons
        self.t1 = Thread_FLC()

        # buttons function mapping
        self.start_button.clicked.connect(self.flc_start_button)
        self.stop_button.clicked.connect(self.flc_end_button)
        self.exit_app.clicked.connect(self.exit_appl_button)


    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.title_label.setText(_translate("MainWindow", "Dynamic Focusing Control using MOEMS "))
        self.credit_label.setText(_translate("MainWindow", "Created By: Aditya Jayanti (Feb 2021)"))
        self.start_button.setText(_translate("MainWindow", "START"))
        self.stop_button.setText(_translate("MainWindow", "STOP"))
        self.show_c1_button.setText(_translate("MainWindow", "Show Cam 1 Feed"))
        self.show_c2_button.setText(_translate("MainWindow", "Show Cam 2 Feed"))
        self.stop_c1_button.setText(_translate("MainWindow", "Stop Cam 1"))
        self.stop_c2_button.setText(_translate("MainWindow", "Stop Cam 2"))
        self.show_both_button.setText(_translate("MainWindow", "Show both the Cam Feed"))
        self.menuInfo.setTitle(_translate("MainWindow", "Info"))
        self.menuAbout.setTitle(_translate("MainWindow", "About"))
        self.actionAbout_the_Thesis.setText(_translate("MainWindow", "About the Thesis"))
        self.actionGo_to_code_GitHub_Repo.setText(_translate("MainWindow", "Go to code"))
        self.actionSystem_Info.setText(_translate("MainWindow", "System Info"))
        self.status_label.setText(_translate("Main Window", "Status:"))
        self.display_status_label.setText(_translate("Main Window", "Stopped"))
        self.exit_app.setText(_translate("Main Window", "EXIT APP"))


    # define the function called in EXIT APP to quit
    def exit_process(self):
        print("ALERT: Main application Window closed...")
        self.close()


    # define System Info menu option
    def show_sys_info(self):    # function for System Info menu-option
        msg = QMessageBox()
        msg.setWindowTitle("System Info")
        msg.setText("""Click on "Show Details..." to see complete Hardware Information""")
        msg.setIcon(QMessageBox.Information)
        msg.setStandardButtons(QMessageBox.Cancel | QMessageBox.Ok)
        msg.setDetailedText("Board: Raspberry Pi 4 Model B (4GB RAM, 32GB SD Card)\n"
                            "Laser: Helium-Neon 4mW Class III-A\n"
                            "Focusing device: Electrostatically-actuated MOEMS Micro-mirror made at HFU\n"
                            "Amplifier: Linear Piezo Amplifier IN:0-12V OUT:>200V\n")
        x = msg.exec_()


    # define About Thesis menu option
    def show_about_thesis(self):    # function for About Thesis menu-option
        msg = QMessageBox()
        msg.setWindowTitle("About the Thesis")
        msg.setText("In this Thesis, the aim is to focus the Laser beam using a MOEMS Micro-mirror controlled by a Fuzzy Logic Controller(FLC)."
                    "The Laser Beam falls on the Micromirror which reflects it to the first of the two camera in this dual-camera setup."
                    "In this dual-camera setup, we use 1 camera to measure the beam-width of the Laser Beam and the second camera to measure the distance of Camera 1 from the Laser Source"
                    "The Beam-Width values and Camera Distance values are fed into the FLC, running on the Raspberry Pi, to get a output signal that controls the amount of voltage fed to the Piezo-amplifier"
                    "The Piezo-Amplifier feeds in the voltage to the Micro-mirror that helps the micro-mirror focus the Laser beam.")
        msg.setIcon(QMessageBox.Information)
        msg.setStandardButtons(QMessageBox.Ok)
        msg.setDefaultButton(QMessageBox.Ok)
        x = msg.exec_()


    # define Got code menu option
    def show_about_gotocode(self):  # function for GoTo Code menu-option
        msg = QMessageBox()
        msg.setWindowTitle("GitHub Link for Code")
        msg.setText("https://github.com/aj-fuwa/thesis-ws-20-21")
        msg.setIcon(QMessageBox.Information)
        msg.setStandardButtons(QMessageBox.Cancel | QMessageBox.Ok)
        msg.setDefaultButton(QMessageBox.Cancel)
        x = msg.exec_()


    # define the START button function
    def flc_start_button(self):
        self.t1.start()
        self.display_status_label.setText("Running")
        print(self.t1.isRunning())


    # define the STOP button function
    def flc_end_button(self):
        self.display_status_label.setText("Stopped")
        self.t1.stop()
        print(self.t1.isRunning())

    # define the EXIT APP button function
    def exit_appl_button(self):
        msg = QMessageBox()
        msg.setWindowTitle("Exit Confirmation")
        msg.setText("Are you sure want to exit the Application?")
        msg.setIcon(QMessageBox.Critical)
        msg.setStandardButtons(QMessageBox.Cancel | QMessageBox.Yes)
        msg.setDefaultButton(QMessageBox.Cancel)
        ret = msg.exec()
        if (ret == QMessageBox.Yes):
            self.exit_process()
        else:
            msg.close()
        x = msg.exec_()


class Thread_FLC(QThread):
    #thread_signal = pyqtSignal(int)
    #flc_obj.setup()
    def run(self):
        flc_obj.setup()
        flc_obj.run_flc(48, 36000)
        print("INFO: FLC QThread running....")

    def stop(self):
        flc_obj.stop_flc()
        print("INFO: FLC QThread stopped...")



if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
