'''
# Name: thesis_main_gui.py
# Task: Defining the main() for the entire GUI Interface with all functions
# Date: (Revised) 22.Feb 2021
# Files associated: flc_component.py, base_ip_class.py
# Src:  https://doc.qt.io/qtforpython/api.html#basic-modules
#       https://www.riverbankcomputing.com/static/Docs/PyQt5/api/qtcore/qthread.html#started
#       https://doc.qt.io/qtforpython/PySide6/QtCore/QThread.html
#       https://www.techwithtim.net/tutorials/pyqt5-tutorial/basic-gui-application/
#       https://www.geeksforgeeks.org/python-introduction-to-pyqt5/
#       https://www.pythonforthelab.com/blog/step-by-step-guide-to-building-a-gui/#acquiring-an-image-from-the-gui
#       https://www.pythonforthelab.com/blog/step-by-step-guide-to-building-a-gui/#signals-and-slots-in-qt
#       https://realpython.com/python-pyqt-qthread/
#       https://www.tutorialspoint.com/pyqt/index.htm
#       https://www.youtube.com/watch?v=G7ffF0U36b0&t=748s
#       https://www.youtube.com/watch?v=dTDgbx-XelY
#       https://www.youtube.com/watch?v=dRRpbDFnMHI
#       https://github.com/scrapy/queuelib
#       https://gpiozero.readthedocs.io/en/stable/api_pins.html#gpiozero.pins.rpigpio.RPiGPIOFactory
#       https://pimylifeup.com/raspberry-pi-gpio/
#       ...
'''


# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'thesis_gui.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMessageBox
from PyQt5.QtCore import *
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
from flc_component import FuzzyController
import cv2 as cv2
import numpy as np
from base_ip_class import CameraFunctions
from queuelib import FifoDiskQueue
import gpiozero as gpio


q_t1 = FifoDiskQueue("queue_thread1")   # storing values from the FLC - Pin Map
q_t2 = FifoDiskQueue("queue_thread2")   # storing values from the Cam 1 Beam-Width - Pin Map
q_t3 = FifoDiskQueue("queue_thread3")   # storing values from the Cam 2 Dist-Meas - Pin Map


exit_flag = 0   # TODO: for EXIT APP button. Check !!!


flc_obj = FuzzyController()


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1139, 760)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.title_label = QtWidgets.QLabel(self.centralwidget)
        self.title_label.setGeometry(QtCore.QRect(200, 20, 751, 91))
        font = QtGui.QFont()
        font.setPointSize(25)
        self.title_label.setFont(font)
        self.title_label.setObjectName("title_label")
        self.credit_label = QtWidgets.QLabel(self.centralwidget)
        self.credit_label.setGeometry(QtCore.QRect(20, 665, 921, 41))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        font.setStrikeOut(False)
        self.credit_label.setFont(font)
        self.credit_label.setScaledContents(True)
        self.credit_label.setObjectName("credit_label")
        self.start_button = QtWidgets.QPushButton(self.centralwidget)
        self.start_button.setGeometry(QtCore.QRect(20, 200, 141, 41))
        self.start_button.setStyleSheet("background-color:green")
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 127, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 170, 170))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0, 128))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.PlaceholderText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 127, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 170, 170))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0, 128))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.PlaceholderText, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 127, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 127, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 170, 170))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 127, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 127, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0, 128))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.PlaceholderText, brush)
        self.start_button.setPalette(palette)
        self.start_button.setObjectName("start_button")
        self.stop_button = QtWidgets.QPushButton(self.centralwidget)
        self.stop_button.setGeometry(QtCore.QRect(20, 360, 141, 41))
        self.stop_button.setObjectName("stop_button")
        self.stop_button.setStyleSheet("background-color:red")

        self.start_c1_button = QtWidgets.QPushButton(self.centralwidget)
        self.start_c1_button.setGeometry(QtCore.QRect(720, 200, 131, 41))
        self.start_c1_button.setObjectName("start_c1_button")

        self.start_c2_button = QtWidgets.QPushButton(self.centralwidget)
        self.start_c2_button.setGeometry(QtCore.QRect(720, 310, 131, 41))
        self.start_c2_button.setObjectName("start_c2_button")

        self.start_flc_button = QtWidgets.QPushButton(self.centralwidget)
        self.start_flc_button.setGeometry(QtCore.QRect(720, 430, 131, 41))
        self.start_flc_button.setObjectName("start_flc_button")

        self.stop_c1_button = QtWidgets.QPushButton(self.centralwidget)
        self.stop_c1_button.setGeometry(QtCore.QRect(960, 200, 131, 41))
        self.stop_c1_button.setObjectName("stop_c1_button")

        self.stop_c2_button = QtWidgets.QPushButton(self.centralwidget)
        self.stop_c2_button.setGeometry(QtCore.QRect(960, 310, 131, 41))
        self.stop_c2_button.setObjectName("stop_c2_button")

        self.stop_flc_button = QtWidgets.QPushButton(self.centralwidget)
        self.stop_flc_button.setGeometry(QtCore.QRect(960, 430, 131, 41))
        self.stop_flc_button.setObjectName("stop_flc_button")

        #self.show_keys = QtWidgets.QPushButton(self.centralwidget)
        #self.show_keys.setGeometry(QtCore.QRect(720, 310, 301, 51))
        #self.show_keys.setObjectName("show_keys")

        MainWindow.setCentralWidget(self.centralwidget)

        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1139, 26))
        self.menubar.setObjectName("menubar")

        self.menuInfo = QtWidgets.QMenu(self.menubar)
        self.menuInfo.setObjectName("menuInfo")

        self.menuAbout = QtWidgets.QMenu(self.menubar)
        self.menuAbout.setObjectName("menuAbout")

        self.menuHelp = QtWidgets.QMenu(self.menubar)
        self.menuHelp.setObjectName("menuHelp")

        MainWindow.setMenuBar(self.menubar)

        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")

        MainWindow.setStatusBar(self.statusbar)

        self.actionAbout_the_Thesis = QtWidgets.QAction(MainWindow)
        self.actionAbout_the_Thesis.setObjectName("actionAbout_the_Thesis")

        self.actionGo_to_code_GitHub_Repo = QtWidgets.QAction(MainWindow)
        self.actionGo_to_code_GitHub_Repo.setObjectName(
				"actionGo_to_code_GitHub_Repo")

        self.actionSystem_Info = QtWidgets.QAction(MainWindow)
        self.actionSystem_Info.setObjectName("actionSystem_Info")

        self.actionHow_this_works = QtWidgets.QAction(MainWindow)
        self.actionHow_this_works.setObjectName("actionHow_this_works")

        self.menuInfo.addAction(self.actionSystem_Info)

        self.menuAbout.addAction(self.actionAbout_the_Thesis)
        self.menuAbout.addAction(
			self.actionGo_to_code_GitHub_Repo)

        self.menuHelp.addAction(self.actionHow_this_works)

        self.menubar.addAction(self.menuInfo.menuAction())
        self.menubar.addAction(self.menuAbout.menuAction())

        self.menubar.addAction(self.menuHelp.menuAction())

        self.status_label = QtWidgets.QLabel(self.centralwidget)
        self.status_label.setGeometry(QtCore.QRect(20, 240, 141, 41))
        self.status_label.setFont(font)
        self.status_label.setObjectName("status_label")

        self.display_status_label = QtWidgets.QLabel(self.centralwidget)
        self.display_status_label.setGeometry(QtCore.QRect(120, 240, 141, 41))
        self.display_status_label.setFont(font)
        self.display_status_label.setObjectName("display_status_label")

        self.cam1_status_label = QtWidgets.QLabel(self.centralwidget)
        self.cam1_status_label.setGeometry(QtCore.QRect(20, 280, 141, 41))
        self.cam1_status_label.setFont(font)
        self.cam1_status_label.setObjectName("cam1_status_label")

        self.cam2_status_label = QtWidgets.QLabel(self.centralwidget)
        self.cam2_status_label.setGeometry(QtCore.QRect(20, 320, 141, 41))
        self.cam2_status_label.setFont(font)
        self.cam2_status_label.setObjectName("cam2_status_label")

        self.display_cam1_status_label = QtWidgets.QLabel(self.centralwidget)
        self.display_cam1_status_label.setGeometry(QtCore.QRect(120, 280, 141, 41))
        self.display_cam1_status_label.setFont(font)
        self.display_cam1_status_label.setObjectName(
					"display_cam1_status_label")

        self.display_cam2_status_label = QtWidgets.QLabel(self.centralwidget)
        self.display_cam2_status_label.setGeometry(QtCore.QRect(120, 320, 141, 41))
        self.display_cam2_status_label.setFont(font)
        self.display_cam2_status_label.setObjectName(
					"display_cam2_status_label")

        self.rhs_label = QtWidgets.QLabel(self.centralwidget)
        self.rhs_label.setGeometry(QtCore.QRect(650, 130, 200, 41))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.rhs_label.setFont(font)
        self.rhs_label.setScaledContents(True)
        self.rhs_label.setObjectName("rhs_label")

        self.lhs_label = QtWidgets.QLabel(self.centralwidget)
        self.lhs_label.setGeometry(QtCore.QRect(20, 130, 200, 41))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.lhs_label.setFont(font)
        self.lhs_label.setScaledContents(True)
        self.lhs_label.setObjectName("lhs_label")

        #self.exit_app = QtWidgets.QPushButton(self.centralwidget)
        #self.exit_app.setGeometry(QtCore.QRect(180, 360, 141, 41))
        #self.exit_app.setObjectName("exit_app")

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        # menu-option function mapping
        self.actionGo_to_code_GitHub_Repo.triggered.connect(lambda : self.show_about_gotocode())
        self.actionSystem_Info.triggered.connect(lambda : self.show_sys_info())
        self.actionAbout_the_Thesis.triggered.connect(lambda : self.show_about_thesis())
        self.actionHow_this_works.triggered.connect(lambda: self.how_this_works())

        # threads with buttons
        self.t1 = Thread_FLC()
        self.t2 = Thread_BW()
        self.t3 = Thread_CD()

        # buttons function mapping
        self.start_button.clicked.connect(self.auto_start_func)
        self.stop_button.clicked.connect(self.auto_stop_func)
        #self.exit_app.clicked.connect(self.exit_appl_button)
        #self.show_keys.clicked.connect(self.show_keys_func)
        self.start_c1_button.clicked.connect(self.start_cam1_func)
        self.start_c2_button.clicked.connect(self.start_cam2_func)
        self.stop_c1_button.clicked.connect(self.stop_cam1_func)
        self.stop_c2_button.clicked.connect(self.stop_cam2_func)
        self.start_flc_button.clicked.connect(self.flc_start_button)
        self.stop_flc_button.clicked.connect(self.flc_end_button)


    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Main Window"))
        self.title_label.setText(_translate("MainWindow", "Dynamic Focusing Control using MOEMS "))
        self.credit_label.setText(_translate("MainWindow", "Created By: Aditya Jayanti (Feb 2021)"))
        self.start_button.setText(_translate("MainWindow", "START APP"))
        self.stop_button.setText(_translate("MainWindow", "STOP APP"))
        self.start_c1_button.setText(_translate("MainWindow", "Start Cam 1"))
        self.start_c2_button.setText(_translate("MainWindow", "Start Cam 2"))
        self.stop_c1_button.setText(_translate("MainWindow", "Stop Cam 1"))
        self.stop_c2_button.setText(_translate("MainWindow", "Stop Cam 2"))
        #self.show_keys.setText(_translate("MainWindow", "Show Key Shortcuts"))
        self.menuInfo.setTitle(_translate("MainWindow", "Info"))
        self.menuAbout.setTitle(_translate("MainWindow", "About"))
        self.actionAbout_the_Thesis.setText(_translate("MainWindow", "About the Thesis"))
        self.actionGo_to_code_GitHub_Repo.setText(_translate("MainWindow", "Go to code"))
        self.actionSystem_Info.setText(_translate("MainWindow", "System Info"))
        self.status_label.setText(_translate("Main Window", "FLC:"))
        self.display_status_label.setText(_translate("Main Window", "Stopped"))
        #self.exit_app.setText(_translate("Main Window", "EXIT APP"))
        self.cam1_status_label.setText(_translate("Main Window", "Cam 1:"))
        self.cam2_status_label.setText(_translate("Main Window", "Cam 2:"))
        self.display_cam1_status_label.setText(_translate("Main Window", "OFF"))
        self.display_cam2_status_label.setText(_translate("Main Window", "OFF"))
        self.menuHelp.setTitle(_translate("Main Window", "Help"))
        self.actionHow_this_works.setText(_translate("MainWindow", "How this works?"))
        self.start_flc_button.setText(_translate("MainWindow", "Start FLC"))
        self.stop_flc_button.setText(_translate("MainWindow", "Stop FLC"))
        self.rhs_label.setText(_translate("MainWindow", "Manual Operation:"))
        self.lhs_label.setText(_translate("MainWindow", "Direct Operation:"))


    # define the function called in EXIT APP to quit
    #def exit_process(self):
    #    print("ALERT: Main application Window closed...")
    #    self.close()

    # define How this works? option
    def how_this_works(self):   # function for How this works menu-option
        msg = QMessageBox()
        msg.setWindowTitle("How this GUI works?")
        msg.setText("There are two ways to use this GUI: \n\n"
                    "First way: Click the green Start App button to start the Cameras and the FLC. "
                    "Click red Stop App button to stop the Cameras and the FLC\n\n"
                    "Second way: To switch on and off all the components individually, click on the buttons on the right hand side\n"
                    "(Shortcuts for cameras: Press B key to stop Cam 1, press C key to stop Cam 2)")
        msg.setIcon(QMessageBox.Information)
        msg.setStandardButtons(QMessageBox.Ok)
        x = msg.exec_()


    # define System Info menu option
    def show_sys_info(self):    # function for System Info menu-option
        msg = QMessageBox()
        msg.setWindowTitle("System Info")
        msg.setText("""Click on "Show Details..." to see complete Hardware Information""")
        msg.setIcon(QMessageBox.Information)
        msg.setStandardButtons(QMessageBox.Ok)
        msg.setDetailedText(
        "Board: Raspberry Pi 4 Model B (4GB RAM, 32GB SD Card)\n"
        "Laser: Helium-Neon 4mW Class III-A\n"
        "Focusing device: Electrostatically-actuated MOEMS Micro-mirror made at HFU\n"
        "Amplifier: Linear Piezo Amplifier IN:0-12V OUT:>200V\n")
        x = msg.exec_()


    # define About Thesis menu option
    def show_about_thesis(self):    # function for About Thesis menu-option
        msg = QMessageBox()
        msg.setWindowTitle("About the Thesis")
        msg.setText("In this Thesis, the aim is to focus the Laser beam using a MOEMS Micro-mirror controlled by a Fuzzy Logic Controller(FLC)."
                    "The Laser Beam falls on the Micromirror which reflects it to the first of the two camera in this dual-camera setup."
                    "In this dual-camera setup, we use 1 camera to measure the beam-width of the Laser Beam and the second camera to measure the distance of Camera 1 from the Laser Source"
                    "The Beam-Width values and Camera Distance values are fed into the FLC, running on the Raspberry Pi, to get a output signal that controls the amount of voltage fed to the Piezo-amplifier"
                    "The Piezo-Amplifier feeds in the voltage to the Micro-mirror that helps the micro-mirror focus the Laser beam.")
        msg.setIcon(QMessageBox.Information)
        msg.setStandardButtons(QMessageBox.Ok)
        msg.setDefaultButton(QMessageBox.Ok)
        x = msg.exec_()


    # define Got code menu option
    def show_about_gotocode(self):  # function for GoTo Code menu-option
        msg = QMessageBox()
        msg.setWindowTitle("GitHub Link for Code")
        msg.setText("https://github.com/aj-fuwa/thesis-ws-20-21")
        msg.setIcon(QMessageBox.Information)
        msg.setStandardButtons(QMessageBox.Ok)
        msg.setDefaultButton(QMessageBox.Ok)
        x = msg.exec_()


    # define the START button function
    def flc_start_button(self):
        self.t1.start()
        self.display_status_label.setText("Running")
        #print(self.t1.isRunning())


    # define the STOP button function
    def flc_end_button(self):
        self.display_status_label.setText("Stopped")
        self.t1.stop()
        #print(self.t1.isRunning())


    '''# define the EXIT APP button function
    # TODO: Button does not exit the code properly. Thread problems. Check!!!
    def exit_appl_button(self):
        msg = QMessageBox()
        msg.setWindowTitle("Exit Confirmation")
        msg.setText("Are you sure want to exit the Application?")
        msg.setIcon(QMessageBox.Critical)
        msg.setStandardButtons(QMessageBox.Cancel | QMessageBox.Yes)
        msg.setDefaultButton(QMessageBox.Cancel)
        ret = msg.exec()
        if (ret == QMessageBox.Yes):
            global exit_flag
            exit_flag = 1
            #self.exit_process()
        else:
            msg.close()
        x = msg.exec_()'''


    # define the show key shortcuts button function
    def show_keys_func(self):
        msg = QMessageBox()
        msg.setWindowTitle("Shortcut Keys")
        msg.setIcon(QMessageBox.Information)
        msg.setStandardButtons(QMessageBox.Ok)
        msg.setText("Press 'B' Key or 'Stop Cam 1' button to stop Camera 1\n"
                    "Press 'C' Key or 'Stop Cam 2' button to stop Camera 2\n")
        x = msg.exec_()


    def start_cam1_func(self):
        self.display_cam1_status_label.setText(QtCore.QCoreApplication.translate("Main Window", "ON"))
        self.t2.start()


    def start_cam2_func(self):
        self.display_cam2_status_label.setText(QtCore.QCoreApplication.translate("Main Window", "ON"))
        self.t3.start()


    def stop_cam1_func(self):
        self.display_cam1_status_label.setText(QtCore.QCoreApplication.translate("Main Window", "OFF"))
        self.t2.stop()


    def stop_cam2_func(self):
        self.display_cam2_status_label.setText(QtCore.QCoreApplication.translate("Main Window", "OFF"))
        self.t3.stop()

    def auto_start_func(self):
        self.display_cam1_status_label.setText(QtCore.QCoreApplication.translate("Main Window", "ON"))
        self.display_cam2_status_label.setText(QtCore.QCoreApplication.translate("Main Window", "ON"))
        self.display_status_label.setText("Running")
        self.t1.start()
        self.t2.start()
        self.t3.start()

    def auto_stop_func(self):
        self.display_cam1_status_label.setText(QtCore.QCoreApplication.translate("Main Window", "OFF"))
        self.display_cam2_status_label.setText(QtCore.QCoreApplication.translate("Main Window", "OFF"))
        self.display_status_label.setText("Stopped")
        self.t1.stop()
        self.t2.stop()
        self.t3.stop()
    class Thread_FLC(QThread):

    def run(self):
        print("INFO: FLC QThread running....")

        flc_obj.setup()

        # pop the values of obtained from Cam 1 and Cam 2
        #   from their respective FIFO queues
        val1 = q_t2.pop()
        val2 = q_t3.pop()

        flc_obj.run_flc(val2, val1)

        send_out = flc_obj.crisp_output

        # call the global FIFO queue for storing defuzzified output
        #   and push the obtained value so that the it can be
        #   sent to R-Pi
        global q_t1
        q_t1.push(str(send_out))

        # TODO: gpiozero not working. Version mismatch on both machines.
        #       Therefore, the voltage select pins are not set on the R-Pi

    def stop(self):
        flc_obj.stop_flc()
        print("INFO: FLC QThread stopped...")
        self.exit()


class Thread_BW(QThread):
    cam = CameraFunctions()
    lower = np.array([0, 0, 255])  # for ppt
    upper = np.array([153, 28, 255])  # for ppt
    print("INFO: Camera 1 - Beam Measure Thread created...")
    cam.set_hsv_values(lower_val=lower, upper_val=upper)
    print("INFO: Camera 1 ON. Thread running...")
    def run(self):
        self.ThreadActive = True
        self.cap = cv2.VideoCapture(0)
        while(self.ThreadActive):
            ret, frame_og = self.cap.read()
            ret_contours, ret_hierarchy, self.frame = self.cam.get_contours(frame=frame_og)
            contour_area, contour_count = self.cam.show_contour_area(ret_contours, self.frame)

            # Draw a rectangle around the Beam Width and display Beam Area
            x, y, w, h = cv2.boundingRect(contour_count)
            cv2.rectangle(self.frame, (x, y), (x + w, y + h), (0, 255, 0), 2)
            cv2.putText(self.frame, 'Box Area=' + str(contour_area), (60, 90), cv2.FONT_HERSHEY_COMPLEX, 0.5, (0, 255, 0), 1,
                        cv2.LINE_AA)

            # Filter-out the error values ans send out only the valid ones
            if (contour_area > 24000 or contour_area < 75000):
                snd_bw = contour_area
                # call the global FIFO queue for storing Cam 1 output
                #   and push the obtained value so that the it can be
                #   used by the FLC
                global q_t2
                q_t2.push(str(snd_bw))

            # Display the frame
            cv2.imshow("Cam 1 Window- Beam Width", self.frame)

            # Press B to stop Beam Measuring
            if cv2.waitKey(1) & 0xFF == ord('b'):
                print("ALERT: B key pressed. Stopping running of Beam Measure...")
                break
            # Exit procedure
        self.cap.release()
        cv2.destroyAllWindows()


    def stop(self):
        self.ThreadActive = False
        print("ALERT: Cam 1 thread stopped...")
        self.exit()


class Thread_CD(QThread):
    cam = CameraFunctions()
    lower = np.array([20, 100, 100])  # sof values
    upper = np.array([30, 255, 255])  # sof values
    print("INFO: Camera 2 - Distance Measurement Thread created...")
    cam.set_hsv_values(lower_val=lower, upper_val=upper)
    print("INFO: Camera 2 ON. Thread running...")
    def run(self):
        self.ThreadActive = True
        cap = cv2.VideoCapture(1)
        while(self.ThreadActive):
            ret, frame_og = cap.read()
            ret_contours, ret_hierarchy, self.frame = self.cam.get_contours(frame=frame_og)
            x, y = self.cam.get_centroid_point(ret_contours)

            # Draw the centroid point on the frame
            cv2.circle(self.frame, (x, y), 5, (0, 0, 255), -1)
            cv2.putText(self.frame, "centroid", (x - 25, y - 25), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 0, 255), 2)

            # calculate distance
            contour_area, contour_count = self.cam.show_contour_area(ret_contours, self.frame)
            dist = self.cam.get_distance(contour_count, self.frame)
            self.frame = cv2.putText(self.frame, str(dist), (80, 30), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 0, 255), 2, cv2.LINE_AA)

            # call the global FIFO queue for storing Cam 2 output
            #   and push the obtained value so that the it can be
            #   used by the FLC
            snd_dist = dist
            global q_t3
            q_t3.push(str(snd_dist))

            # show the scale markings on the frame
            self.cam.draw_scales_(self.frame)
            cv2.imshow("Cam 2 Window - Distance Measurement", self.frame)

            # Press C to stop Distance Measuring
            if cv2.waitKey(1) & 0xFF == ord('c'):
                print("ALERT: C key pressed. Stopping running of Distance Measure...")
                break
            # Exit procedure
        cap.release()
        cv2.destroyAllWindows()

    def stop(self):
        self.ThreadActive = False
        print("ALERT: Cam 2 thread stopped...")
        self.exit()

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
